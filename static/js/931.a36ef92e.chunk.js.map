{"version":3,"file":"static/js/931.a36ef92e.chunk.js","mappings":"8SAEMA,EAAW,gCACXC,EAAU,mCAEVC,EAAY,mCAAG,WAAMC,GAAN,uFACIC,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,oCACkBC,EADlB,6BAC8CE,IAFlD,cACbE,EADa,yBAIZA,EAASC,MAJG,2CAAH,sDAOZC,EAAa,mCAAG,WAAMC,GAAN,uFACGJ,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,iBACDQ,EADC,oBACaP,EADb,iBADH,cACdI,EADc,yBAIbA,EAASC,MAJI,2CAAH,sDAObG,EAAgB,mCAAG,WAAOC,EAAYC,GAAnB,uFACAP,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,gCACcC,EADd,yDACsES,EADtE,iBACyFC,IAFzF,cACjBN,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,wDAOhBM,EAAgB,mCAAG,WAAMJ,GAAN,uFACAJ,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,iBACDQ,EADC,4BACqBP,EADrB,iBADA,cACjBI,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOhBO,EAAY,mCAAG,WAAML,GAAN,uFACIJ,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,iBACDQ,EADC,4BACqBP,EADrB,2BADJ,cACbI,EADa,yBAIZA,EAASC,MAJG,2CAAH,qD,+ICjCX,SAASQ,EAAT,GAAmC,IAAfC,EAAc,EAAdA,WAEnBC,EAAWD,EAAWE,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,aAAlB,OAC9B,gBAAIC,UAAU,YAAd,WACE,gBACEA,UAAU,iBACVC,IAAG,UALQ,mCAKR,OAAgBF,GACnBG,IAAKJ,KAEP,uBAAIA,MANyBD,EADD,IAUhC,OACE,gBAAKG,UAAU,SAAf,UACE,eAAIA,UAAU,OAAd,SAAsBL,KAG3B,C,aCXc,SAASQ,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQvB,GAAOwB,EAAAA,EAAAA,MAAPxB,GAiBR,OAfAyB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,2FACrBL,GAAW,GADU,mBAGOjB,EAAAA,EAAAA,IAAiBJ,GAHxB,OAGb2B,EAHa,OAInBR,EAASQ,EAAYC,MAJF,gDAMnBL,EAAS,EAAD,IANW,yBAQnBF,GAAW,GARQ,4EAAH,qDAWpBK,GACD,GAAE,CAAC1B,KAGF,iBAAKa,UAAU,YAAf,WACE,kEACCO,GAAU,SAACS,EAAA,EAAD,KAAa,iBACvBX,IAAS,SAACZ,EAAD,CAAUC,WAAYW,IAC/BI,IAAS,6MAGf,C","sources":["components/fetch.js","components/castList.js","components/pages/cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY_API = 'fad6989dda3803c9fb66ec36be17ab2f';\n\nconst fetchRequest = async page => {\n  const response = await axios.get(\n    `${BASE_URL}trending/all/day?api_key=${KEY_API}&language=uk&page=${page}`\n  );\n  return response.data;\n};\n\nconst fetchOneMovie = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${KEY_API}&language=uk`\n  );\n  return response.data;\n};\n\nconst fetchMovieByName = async (searchName, currentPage) => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY_API}&language=uk&page=1&include_adult=false&query=${searchName}&page=${currentPage}`\n  );\n  return response.data;\n};\n\nconst fetchActorsMovie = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${KEY_API}&language=uk`\n  );\n  return response.data;\n};\n\nconst fetchReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${KEY_API}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport {\n  fetchRequest,\n  fetchOneMovie,\n  fetchMovieByName,\n  fetchActorsMovie,\n  fetchReviews,\n};\n","export function CastList({ actorsList }) {\n  const imageURL = 'https://image.tmdb.org/t/p/w300';\n  const elements = actorsList.map(({ cast_id, name, profile_path }) => (\n    <li className=\"cast-item\" key={cast_id}>\n      <img\n        className=\"cast_item__img\"\n        src={`${imageURL}${profile_path}`}\n        alt={name}\n      />\n      <p>{name}</p>\n    </li>\n  ));\n  return (\n    <div className=\"centre\">\n      <ul className=\"cast\">{elements}</ul>\n    </div>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchActorsMovie } from 'components/fetch';\nimport { CastList } from 'components/castList';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Cast() {\n  const [state, setState] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchInfActors = async () => {\n      setLoading(true);\n      try {\n        const movieActors = await fetchActorsMovie(id);\n        setState(movieActors.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInfActors();\n  }, [id]);\n\n  return (\n    <div className=\"cast_list\">\n      <h3>Актори:</h3>\n      {loading ? <Loader /> : <p></p>}\n      {state && <CastList actorsList={state} />}\n      {error && <h4>Упссс...Щось зламалося... Спробуй ще...</h4>}\n    </div>\n  );\n}\n"],"names":["BASE_URL","KEY_API","fetchRequest","page","axios","response","data","fetchOneMovie","id","fetchMovieByName","searchName","currentPage","fetchActorsMovie","fetchReviews","CastList","actorsList","elements","map","cast_id","name","profile_path","className","src","alt","Cast","useState","state","setState","loading","setLoading","error","setError","useParams","useEffect","fetchInfActors","movieActors","cast","Loader"],"sourceRoot":""}